package com.thunderware.module.exploit;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import org.lwjgl.input.Keyboard;

import com.thunderware.Thunder;
import com.thunderware.events.Event;
import com.thunderware.events.listeners.EventMotion;
import com.thunderware.events.listeners.EventPacket;
import com.thunderware.module.ModuleBase;
import com.thunderware.module.movement.Flight;
import com.thunderware.settings.settings.ModeSetting;
import com.thunderware.utils.TimerUtils;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

public class Disabler extends ModuleBase {

	public ModeSetting mode;
	public TimerUtils timer = new TimerUtils();
	public static List<Packet> transactions;
	public static List<Packet> keepAlives;
	public double x,y,z;
	
	public Disabler() {
		super("Disabler", Keyboard.KEY_NONE, Category.EXPLOIT);
		ArrayList<String> modes = new ArrayList<>();
		modes.add("Hypixel");
		modes.add("BlocksMC");
		this.mode = new ModeSetting("Mode", modes);
		addSettings(mode);
	}
	
	public void onEvent(Event event) {
		if(event instanceof EventPacket) {
			if(mc.thePlayer == null)
				return;
			EventPacket e = (EventPacket)event;
			switch(mode.getCurrentValue()) {
			
				case "BlocksMC":
					
                    if (mc.thePlayer.ticksExisted % 100 == 0 && e.getPacket() instanceof C03PacketPlayer) {
                        double x = mc.thePlayer.posX,
                                y = mc.thePlayer.posY,
                                z = mc.thePlayer.posZ;
                        mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(x, y - 14.36D, z, false));
                        mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, false));
                    }
					
					break;
					
				case "Hypixel":
					if(e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C00PacketKeepAlive) {
						e.setCancelled(true);
					    final ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
					    ScheduledFuture<?> future = service.schedule(() -> mc.thePlayer.sendQueue.addToSendQueueNoEvent(e.getPacket()), 500, TimeUnit.MILLISECONDS);
					    service.shutdown();
					}
					
					
					break;
			}
		}
		
		if(event instanceof EventMotion) {
			if(mc.thePlayer == null)
				return;
			EventMotion e = (EventMotion)event;
			switch(mode.getCurrentValue()) {
					
				case "Hypixel":
					break;
			}
		}
	}
}
